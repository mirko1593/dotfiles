"=============== Basic ===================
set nocompatible
filetype plugin indent on
let mapleader=","
syntax on

so ~/.vim/plugins.vim

"mouse move laziness
set timeout
set timeoutlen=300
set ttimeoutlen=0

set noeb vb t_vb=
set backspace=indent,eol,start  	"backspace on indent,eof,start of line
set scrolloff=8
set history=50
language en_US.UTF-8
set t_CO=256
set noshowmode

set hidden                          "unsaved modification to buffer behind
                                    "windonw.
set autoread                        "automatic read updated file
set autowrite                      "automatic write back to file(unnessary)

"set clipboard=unnamed               "sync with system clipboard
set directory=$HOME/.vim/swapfiles//    "save swapfiles in one place
vnoremap <leader>y "+y
nnoremap <leader>y "+y
nnoremap <leader>p "+p
vnoremap <leader>p "+p
nnoremap <leader>P "+P
vnoremap <leader>P "+P






"=============== Setting ===================
"search
set incsearch
set hlsearch
set ignorecase
set smartcase
nmap <leader><space> :nohlsearch<cr>

"visual mode and use no-magic regexp
function! s:VSetSearch(cmdtype)
    let temp = @s
    norm! gv"sy
    let @/ = '\V' . substitute(escape(@s, a:cmdtype.'\'), '\n', '\\n', 'g')
    let @s = temp
endfunction

xnoremap * :<C-u>call <SID>VSetSearch('/')<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch('?')<CR>?<C-R>=@/<CR><CR>

"indentation
set autoindent
set expandtab
set tabstop=4               "basic tab size
set softtabstop=4           "tab size in insert mode
set shiftwidth=4            "shift width in normal mode

vnoremap J :m '>+1<CR>gv=gv
vnoremap K :m '<-2<CR>gv=gv

map j gj
map k gk

"split
set splitbelow              "default horizontal split direction up
set splitright             "default vertical split to left

" nnoremap <C-J> <C-w><C-J>
" nnoremap <C-K> <C-W><C-K>
" nnoremap <C-L> <C-W><C-L>
" nnoremap <C-H> <C-W><C-H>
"<C-W> s -- new window


nnoremap <C-o> <C-W><C-o>
"<C-W><Bar>     fullscreen current split
"<C-W>=         equal screen split

" Set Gdiff default split direction as vertical
" set diffopt+=vertical

"autcomplete
set complete=.,w,b,u
set completeopt-=preview
set cpoptions+=d





"=============== Visual ===================
set background=dark
" Ensure terminal app is using a base16 terminal theme.
" and download colorscheme from the right repository:
" https://github.com/martinlindhe/base16-iterm2
colorscheme base16-google-light

hi LineNr ctermbg=bg ctermfg=gray
"set foldcolumn=2
hi foldcolumn ctermbg=bg
hi vertsplit ctermbg=bg ctermfg=bg
hi CursorLine ctermbg=gray ctermfg=bg


"number
set number
set relativenumber
set numberwidth=4

"status bar
set ruler
set laststatus=2
set signcolumn=no





"=============== Mappings ===================
nmap <leader>ev :e $MYVIMRC<cr>
nmap <leader>ep :split ~/.vim/plugins.vim<cr>
nmap <leader>et :split ~/.tmux.conf<cr>

" before this map works, need to disable iterm interrupt <c-s>
" already put some setting in ~/.zshrc
nnoremap  <silent> <C-s> :w<cr>
inoremap <silent> <C-s> <ESC>:w<cr>

"<S-J> join lines
nmap <S-k> a<cr><ESC>

"edit file in current director
nmap <leader>e :e <C-R>=escape(expand("%:p:h"),' ') . '/'<cr>

vnoremap <leader>v "_dP
nnoremap <space> za



"=============== Commands ===================
command! -nargs=+ -complete=file_in_path Gr execute 'silent grep! <args>' | copen | silent redraw!



"=============== AutoCommands ===================
" Open Explore automatically when vim starts with no
" arguments. eg: "vim" or "vim ."
augroup enter
    au!
    autocmd StdinReadPre * let s:std_in=1
augroup END

augroup setting
    autocmd!
    autocmd FileType help nmap <buffer> q :q<cr>
    autocmd BufLeave help unmap q
    "autocmd FileType netrw nnoremap Q :q<cr>
	autocmd BufWritePost .vimrc so %
    autocmd BufWritePost ~/.vim/plugins.vim so $MYVIMRC
    autocmd VimResized * :wincmd =
augroup END

augroup ctags
    au!
    autocmd FileType javascript,jsx,ruby,go nnoremap <leader>rt :!ctags -R .<cr>
    autocmd BufWritePre *.js,*.jsx,*.rb,*.go :Dispatch! ctags %
augroup end

augroup js
    autocmd!
    autocmd FileType javascript set filetype=javascript.jsx
    autocmd FileType javascript,jsx setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css,scss let b:prettier_exec_cmd = "prettier-stylelint"
    autocmd BufWritePre *.js,*.jsx PrettierAsync
    autocmd FileType *.js,*.jsx setlocal 
                \ makeprg=./node_modules/eslint/bin/eslint.js
    autocmd FileType javascript,jsx nnoremap <leader>c :Make! %<cr>
    " autocmd BufWritePost *.js,*.jsx Make! % 
    autocmd FileType javascript,jsx nnoremap <leader>cc :lclose<cr>
augroup end

augroup ruby
    autocmd!
    autocmd BufRead *.erb set filetype=eruby.html.ruby
    autocmd FileType ruby,eruby,yaml setlocal ts=2 sts=2 sw=2 expandtab
    " autocmd FileType eruby set filetype=eruby.html
    autocmd FileType ruby compiler ruby
    autocmd BufNewFile,BufRead Rakefile,Capfile,Gemfile,config.ru set filetype=ruby
    " autocmd FileType ruby let b:dispatch="rubocop -f q -x %"
    autocmd BufWritePre *.rb silent :Dispatch! rubocop -x -f q %

    " autocmd BufWritePost,BufWritePre *.rb :silent LspDocumentDiagnostics
    autocmd FileType ruby nnoremap <leader>c :silent LspDocumentDiagnostics<cr>
    autocmd FileType ruby nnoremap <leader>cc :lclose<cr>

    " autocmd FileType ruby nnoremap <c-m> :Dispatch! ruby %<cr>
augroup end

augroup go
    autocmd!
    autocmd BufRead,BufNewFile,BufWritePost *.proto setfiletype proto
    autocmd FileType proto setlocal ts=2 sts=2 sw=2 expandtab
    " gofmt was handled by gopls
    " autocmd BufRead,BufWritePost *.go silent :!gofmt -w %
    " autocmd BufRead,BufWritePost *.go silent :!goimports -w %
    autocmd FileType go setlocal makeprg=revive
    autocmd BufWritePost *.go silent make! % | silent redraw!
    " autocmd FileType go let b:dispatch="goimports -w %"
    autocmd BufWritePost *.go :Dispatch! goimports -w %
    autocmd QuickFixCmdPost [^l]* cwindow
    autocmd FileType go nnoremap <leader>c :silent LspDocumentDiagnostics<cr>
    autocmd FileType go nnoremap <leader>cc :lclose<cr>
augroup END


augroup cursor_behaviour
    autocmd!

    " reset cursor on start:
    autocmd VimEnter * silent !echo -ne "\e[2 q"
    " cursor blinking bar on insert mode
    let &t_SI = "\e[1 q"
    " cursor steady block on command mode
    let &t_EI = "\e[2 q"
    " turn on/off line hi when enter/leave insert mode
    "autocmd InsertEnter,InsertLeave * set cul!
augroup END





"================ Plugins ====================
"fzf
nnoremap <C-p> :Files<CR>
nnoremap <C-f> :BTags<CR>
nnoremap <c-e> :Buffers<CR>

"goyo
nnoremap gf :Goyo<CR>

"easy-align
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

"ultisnips
let g:UltiSnipsSnippetsDir=$HOME."/.vim/UltiSnips"
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<s-tab>"

"supertab
inoremap <expr> <c-j> ((pumvisible())?("\<C-n>"):("j"))
inoremap <expr> <c-k> ((pumvisible())?("\<C-p>"):("k"))

"vim-fugitive
augroup fugtive
    autocmd!
    autocmd BufReadPost fugitive://* set bufhidden=delete
    autocmd User fugitive nnoremap <buffer> .. :edit %:h<CR>
augroup END

"nerdtree
nmap <C-b> :NERDTreeToggle<cr>
let NERDTreeHijackNetrw = 0
let NERDTreeShowHidden = 1
let g:NERDTreeMapJumpPrevSibling=""
let g:NERDTreeMapJumpNextSibling=""
let g:netrw_dirhistmax = 0
" Open NERDTree automatically when vim starts with no
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif



" vim-lsp
augroup LspGo
  au!
  autocmd User lsp_setup call lsp#register_server({
      \ 'name': 'go-lang',
      \ 'cmd': {server_info->['gopls']},
      \ 'whitelist': ['go'],
      \ })
  if executable('solargraph')
      " gem install solargraph
      au User lsp_setup call lsp#register_server({
          \ 'name': 'solargraph',
          \ 'cmd': {server_info->[&shell, &shellcmdflag, 'solargraph stdio']},
          \ 'initialization_options': {"diagnostics": "true"},
          \ 'whitelist': ['ruby'],
          \ })
  endif
  autocmd FileType go,ruby setlocal omnifunc=lsp#complete
  autocmd FileType go,ruby nmap <buffer> gd <plug>(lsp-definition)
  autocmd FileType go,ruby nmap <buffer> ,n <plug>(lsp-next-error)
  autocmd FileType go,ruby nmap <buffer> ,p <plug>(lsp-previous-error)
augroup END


highlight lspReference ctermfg=fg guifg=fg ctermbg=lightgreen guibg=lightgreen


" emmet-vim
let g:user_emmet_install_global = 0
autocmd FileType html,css,eruby,jsx,javascript EmmetInstall
let g:user_emmet_leader_key=','

" vim-commentary
augroup Commentary
    au!
    autocmd FileType html setlocal commentstring=//\ %s
    autocmd FileType eruby let g:surround_45 = "<% \r %>"
    autocmd FileType eruby let g:surround_61 = "<%= \r %>"
augroup end


"ale
" let g:ale_set_loclist = 0
" let g:ale_set_quickfix = 1
" let g:ale_open_list = 1
" let g:ale_lint_on_text_changed = 'never'
" let g:ale_lint_on_insert_leave = 0
" let g:ale_lint_on_enter = 0


" let g:ale_fix_on_save = 1
" let g:ale_fixers = {
" \   '*': ['remove_trailing_lines', 'trim_whitespace'],
" \   'go': ['goimports', 'gofmt'],
" \}


" let g:ale_linters_explicit = 1
" let g:ale_linters = {
" \   'go': [],
" \}
